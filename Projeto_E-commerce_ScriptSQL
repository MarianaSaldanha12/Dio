-- Criação do Banco de Dados para um cenário de E-commerce
create database ecommerce;
use ecommerce;
-- Criação de tabelas
-- tabela cliente
create table clients(
	idClient int auto_increment primary key,
    Fname varchar(10),
    Mname char(3),
    Lname varchar(20),
    CPF char(11) not null,
    Adress varchar(30),
    constraint unique_cpf_client unique (CPF)
);
desc clients;
alter table clients auto_increment=1;

-- tabela produto
-- size = dimensão do produto
create table product(
	idProduct int auto_increment primary key,
    Pname varchar(10) not null,
    Classification_kids bool default false,
    Category enum('Eletrônico','Vestuário','Brinquedos','Alimentos','Móveis') not null,
    Avaliation float default 0,
    Size varchar(10)
);
desc product;
-- tabela pagamentos
-- para ser continuado no desafio: termine de implementar a tabela e crie a conexão com as tabelas necessárias, reflita essa modificação no diagrama de esquema relacional
-- criar constraints relacionadas ao pagamento
create table payments(
	idClient int,
    idPayment int,
    typePayment enum('Boleto','Cartão','Dois Cartões'),
    LimitAvailable float,
    primary key(idClient, id_payment)
);
-- tabela pedido
create table orders(
	idOrders int auto_increment primary key,
    idOrdersClient int,
    OrdersStatus enum('Cancelado','Confirmado','Em processamento') default 'Em processamento',
    OrdersDescription varchar(255),
    OrdersFreight float default 10,
    PaymentCash bool default false,
    constraint fk_orders_cliente foreign key(idOrdersClient) references clients(idClient)
);
desc orders;
-- tabela estoque
create table productsStorage(
	idProductsStorage int auto_increment primary key,
    StorageLocation varchar(255),
    Quantity int default 0
);
desc productsStorage;
-- tabela fornecedor
create table Supplier(
	idSupplier int auto_increment primary key,
    SocialNameSupplier varchar(255) not null,
    CNPJSupplier char(15) not null,
    ContactSupplier char(11) not null,
    constraint unique_supplier unique (CNPJSupplier)
);
desc Supplier;
-- tabela vendedor
create table Seller(
	idSeller int auto_increment primary key,
    SocialNameSeller varchar(255) not null,
    AbstName varchar(255),
    CNPJSeller char(15),
    CPFSeller char(9),
    Location varchar(255),
    ContactSeller char(11) not null,
    constraint unique_cnpj_seller unique (CNPJSeller),
    constraint unique_cpf_seller unique (CPFSeller)
);
desc Seller;
-- tabela produto vendedor
create table ProductSeller(
	idProductSeller int,
    idPproduct int,
    ProductQuantity int default 1,
    primary key(idProductSeller, idPproduct),
    constraint fk_product_seller foreign key(idProductSeller) references Seller(idSeller),
    constraint fk_product_product foreign key(idPproduct) references product(idProduct)
);
desc ProductSeller;
-- tabela produto pedido
create table ProductOrder(
	idProdOrder int,
    idProductOrder int,
    ProductOrderQuantity int default 1,
    ProductOrderStatus enum('Disponível','Sem estoque') default 'Disponível',
    primary key(idProdOrder, idProductOrder),
    constraint fk_productorder_seller foreign key (idProdOrder) references product(idProduct),
    constraint fk_productorder_product foreign key (idProductOrder) references orders(idOrders)
    );
    desc ProductOrder;
-- tabela local estoque
create table StorageLocation(
	idLproduct int,
    idLStorage int,
    location varchar(255) not null,
    primary key(idLproduct, idLStorage),
    constraint fk_productstorage_seller foreign key(idLproduct) references product(idProduct),
    constraint fk_productstorage_product foreign key(idLStorage) references productsStorage(idProductsStorage)
);
-- tabela produto fornecedor
create table productSupplier(
	idPsSupplier int,
    idPsProduct int,
    ProductSupplierQuantity int not null,
    primary key(idPsSupplier, idPsProduct),
    constraint fk_product_supplier_supplier foreign key(idPsSupplier) references Supplier(idSupplier),
    constraint fk_product_supplier_product foreign key(idPsProduct) references product(idProduct)
);
